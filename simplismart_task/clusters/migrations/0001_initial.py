# Generated by Django 5.2 on 2025-04-20 16:03

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0009_alter_organization_invite_code'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cluster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('total_cpu', models.FloatField(help_text='Total CPU cores available')),
                ('total_ram', models.FloatField(help_text='Total RAM in GB')),
                ('total_gpu', models.IntegerField(help_text='Total GPU units available')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clusters', to='accounts.organization')),
            ],
        ),
        migrations.CreateModel(
            name='ResourceAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allocated_cpu', models.FloatField(help_text='Allocated CPU cores')),
                ('allocated_ram', models.FloatField(help_text='Allocated RAM in GB')),
                ('allocated_gpu', models.IntegerField(help_text='Allocated GPU units')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_allocations', to='clusters.cluster')),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(('allocated_cpu__gte', 0)), name='positive_cpu_allocation'), models.CheckConstraint(condition=models.Q(('allocated_ram__gte', 0)), name='positive_ram_allocation'), models.CheckConstraint(condition=models.Q(('allocated_gpu__gte', 0)), name='positive_gpu_allocation')],
            },
        ),
    ]
